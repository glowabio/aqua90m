{
    "version": "0.0.1",
    "id": "get-shortest-distance-between-points",
    "use_case": "hydrography90m",
    "title": {"en": "Shortest distance between two points"},
    "description": {
        "en": "Return the shortest distance (using the Dijkstra algorithm) stream from the stream segment to which the given start point belongs to the stream segment to which the given end point belongs. They have to be in the same river basin. The path is returned as GeoJSON FeatureCollection or GeometryCollection, depending on user input. The geometries are LineStrings in both cases. The start and end segments are included."
    },
    "jobControlOptions": ["sync-execute", "async-execute"],
    "keywords": ["dijkstra", "shortest-path", "stream", "stream-segment", "geojson", "GeoFRESH", "hydrography90m", "routing"],
    "links": [{
        "type": "text/html",
        "rel": "about",
        "title": "GeoFRESH website",
        "href": "https://geofresh.org/",
        "hreflang": "en-US"
    },
    {
        "type": "text/html",
        "rel": "about",
        "title": "On Stream segments (Hydrography90m)",
        "href": "https://hydrography.org/hydrography90m/hydrography90m_layers",
        "hreflang": "en-US"
    }],
    "inputs": {
         "points": {
            "title": "Points (GeoJSON)",
            "description": "GeoJSON: GeometryCollection of MultiPoint items (WGS84)-",
            "schema": {"type": "string"},
            "minOccurs": 1,
            "maxOccurs": 1,
            "metadata": null,
            "keywords": ["GeoJSON", "wgs84", "MultiPoint"]
        },
        "comment": {
            "title": "Comment",
            "description": "Arbitrary string that will not be processed but returned, for user\"s convenience.",
            "schema": {"type": "string"},
            "minOccurs": 0,
            "maxOccurs": 1,
            "metadata": null,
            "keywords": ["comment"]
        }
    },
    "outputs": {
        "distances_matrix": {
            "title": "Shortest distances between the points",
            "description": "Shortest distances between the provided locations, as a matrix, stored as JSON. Possibly not ideal. Wprk in progress. Routing is done via Dijkstra algorithm. Subcatchment ids and strahler order of each line segment along the way are included.",
            "schema": {
                "type": "object",
                "contentMediaType": "application/json"
            }
        }
    },
    "example": {
        "inputs": {
            "points": {
                "type": "MultiPoint",
                "coordinates": [
                    [9.937520027160646, 54.69422745526058],
                    [9.9217, 54.6917],
                    [9.9312, 54.6933]
                ]
            },
            "comment": "located in schlei area"
        }
    }
}
